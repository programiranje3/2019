"""Domain classes and functions related to the concept of performer
"""


from woodstock.util import utility


class Performer:
    """The class describing the concept of performer.
    It is assumed that a performer is sufficiently described by their
    name and whether they are a solo performer or a band.

    Illustrates some of the important concepts of Python classes:
    - self
    - __init__()
    - __str__()
    - __eq__(self, other) is the equivalent of Java equals() and should be overridden in classes
    - data fields (instance variables)
    - methods - calling them by self.<method>(...) from the same class where they are defined
    """

    def __init__(self, name, is_band=True):
        self.name = name
        self.is_band = is_band
        # self.__n = 'lll'                                    # 'private' field

    # Properties: 'private' fields; run setters and getters in the debugger.
    # Make name a property (after setting up __init__(), __str__(), __eq__(), methods,...).

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, n):
        self.__name = n if isinstance(n, str) and n != '' else 'unknown'

    # Add an immutable property (no setter for it)

    def __str__(self):
        return (self.name + ' (band)' if self.is_band else self.name + ' (solo performer)') \
            if self.name and isinstance(self.name, str) and self.name != 'unknown' else 'unknown'

    def __eq__(self, other):
        return self.name == other.name

    def play(self, song_title, *args, **kwargs):
        """Assumes that song_title, *args (expressions of gratitude) and kwargs.values() (messages) are strings.
        Prints song_title, expressions of gratitude and messages. A call example:
            <performer>.play(song_title, *['Thank you!', 'You're wonderful!], love='We love you!')
        """

        print(self.name + ':', song_title + '... ', ' '.join(args), ' '.join([v for k, v in kwargs.items()]))

    def play_song(self, song_title, *args, **kwargs):
        """Demonstrates calling another method feom the same class (self.<method>(...) as a mandatory syntax).
        """

        self.play(song_title, *args, **kwargs)

    # Alternative constructor
    @classmethod
    def from_str(cls, performer_string):
        """Inverted __str__() method.
        Assumes that performer_string is in the format generated by __str__().
        """

        split = performer_string.split(' (')
        name = split[0]
        is_band = True
        if split[0] == 'unknown':
            name = ''
            is_band = False
        if split[-1] == 'solo performer)':
            is_band = False
        return cls(name, is_band)


if __name__ == "__main__":

    pass

    # Data

    # Some of the Woodstock performers, Aug 15-16, 1969
    melanie = Performer('Melanie', is_band=False)
    arloGuthrie = Performer('Arlo Guthrie', is_band=False)
    # Some of the Woodstock performers, Aug 16-17, 1969
    gratefulDead = Performer('Grateful Dead', is_band=True)
    jeffersonAirplane = Performer('Jefferson Airplane', is_band=True)
    theWho = Performer('The Who', is_band=True)
    ccr = Performer('Creedence Clearwater Revival', is_band=True)
    # Some of the Woodstock performers, Aug 17-18, 1969
    csny = Performer('Crosby, Stills, Nash and Young', is_band=True)
    jimiHendrix = Performer('Jimi Hendrix', is_band=False)
    theBand = Performer('The Band', is_band=True)

    # Print objects
    print(theBand)
    print()

    # Compare objects
    print(theWho == Performer('Paul Butterfield Blues Band'))
    print()

    # Access data fields (instance variables), including 'private' fields
    jimiHendrix.name = 'Jimi Hendrix Experience'
    print(jimiHendrix.name)
    print(jimiHendrix)
    # print(jimiHendrix._Performer__n)
    print()

    # Add new data fields (instance variables)
    #   1. <object>.<new_attr> = <value>
    #   2. <object>.__setattr__('<new_attr>', <value>)      # counterpart: <object>.__getattribute__('<attr>')
    #   3. setattr(<object>, '<new_attr>', <value>))        # counterpart: getattr(<object>, '<attr>')
    # jimiHendrix.nationality = 'US'
    # jimiHendrix.__setattr__('nationality', 'US')
    # print(jimiHendrix.nationality)
    # print(jimiHendrix.__getattribute__('nationality'))
    setattr(jimiHendrix, 'nationality', 'US')
    print(getattr(jimiHendrix, 'nationality'))
    print(getattr(jimiHendrix, 'name'))
    print()

    # Calling methods
    jimiHendrix.play('Crosstown traffic', *['Thank you!', 'Yeah!'], love='We love you!')
    jimiHendrix.play_song('Crosstown traffic', *['Thank you!', 'Yeah!'], love='We love you!')
    print()

    # Demonstrate object data fields and methods in Python Console for some built-in classes (boolean, int, object,...)
    # - True + 1
    # - True.__int__()
    # - (1).__class__.__name__
    # - (1).__class__
    # - o.__dir__()
    # - o.__dir__

    # Demonstrate object data fields and methods in Python Console for Performer objects
    print(jimiHendrix.__dict__)
    print(jimiHendrix.__dir__())
    print()

    # Demonstrate @classmethod (from_str())
    jimiHendrixStr = jimiHendrix.__str__()
    print(Performer.from_str(jimiHendrixStr))
    unknown_performer = Performer('')
    print(unknown_performer)
    unknown_performer_str = unknown_performer.__str__()
    print(Performer.from_str(unknown_performer_str))
    print()

